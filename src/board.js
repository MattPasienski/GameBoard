// Generated by CoffeeScript 1.4.0
var Board, Hex;

Hex = require("./hex");

module.exports = Board = (function() {

  Board.HEX_RADIUS = 30;

  Board.COLUMNS = 17;

  Board.ROWS = 15;

  Board.COLUMN_SEPARATION = Math.floor(3 * Board.HEX_RADIUS / 2);

  Board.ROW_SEPARATION = Math.floor(Board.HEX_RADIUS * Math.sqrt(3));

  Board.COLUMN_OFFSET = Math.floor(Board.HEX_RADIUS * Math.sqrt(3) / 2);

  Board.MARGIN = 35;

  function Board() {
    var i, j, _i, _j, _ref, _ref1;
    this.hexes = [];
    for (i = _i = 0, _ref = Board.COLUMNS; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.hexes.push([]);
      for (j = _j = 0, _ref1 = Board.ROWS; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        this.hexes[i].push(new Hex([i, j], this.getHexPosition([i, j])));
      }
    }
  }

  Board.prototype.positionToHex = function(x, y) {
    var c, closest, coord, cx, cy, dist, hex, i, j, minDist, r, testHexes, _i, _j, _len, _len1, _ref, _ref1;
    i = Math.floor((x - Board.MARGIN) / Board.COLUMN_SEPARATION);
    j = Math.floor((y - Board.MARGIN) / Board.ROW_SEPARATION);
    if (i >= Board.COLUMNS || j >= Board.ROWS || i < -1 || j < -1) {
      return null;
    }
    testHexes = [];
    _ref = [[i, j], [i + 1, j], [i, j + 1], [i + 1, j + 1]];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      coord = _ref[_i];
      r = coord[0], c = coord[1];
      if (r >= 0 && r < Board.COLUMNS && c >= 0 && c < Board.ROWS) {
        testHexes.push(this.hexes[r][c]);
      }
    }
    minDist = 99999999;
    closest = null;
    for (_j = 0, _len1 = testHexes.length; _j < _len1; _j++) {
      hex = testHexes[_j];
      _ref1 = hex.position, cx = _ref1[0], cy = _ref1[1];
      dist = (x - cx) * (x - cx) + (y - cy) * (y - cy);
      if (minDist > dist) {
        minDist = dist;
        closest = hex;
      }
    }
    return closest;
  };

  Board.prototype.infectNeighbors = function(hex) {
    var coord, neighbor, newCoord0;
    if (hex) {
      hex.setState(1 + hex.state);
    }
    coord = hex.coordinate;
    newCoord0 = coord[0] + 1;
    neighbor = this.hexes[newCoord0][coord[1]];
    if (hex && neighbor && neighbor.state !== 1) {
      return neighbor.setState(hex.state);
    }
  };

  Board.prototype.draw = function(ctx) {
    var column, hex, _i, _j, _len, _len1, _ref;
    column = 0;
    _ref = this.hexes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      for (_j = 0, _len1 = column.length; _j < _len1; _j++) {
        hex = column[_j];
        this.drawHexagon(ctx, hex);
      }
    }
    return this.drawHexagon(ctx, this.positionToHex(200, 200));
  };

  Board.prototype.getHexPosition = function(coord) {
    var x, y;
    x = coord[0] * Board.COLUMN_SEPARATION + Board.MARGIN;
    y = coord[1] * Board.ROW_SEPARATION + Board.MARGIN;
    if (coord[0] % 2 === 1) {
      y += Board.COLUMN_OFFSET;
    }
    return [x, y];
  };

  Board.prototype.drawHexagon = function(ctx, hex) {
    var column, cx, cy, i, row, _i, _ref, _ref1;
    ctx.save();
    _ref = hex.position, cx = _ref[0], cy = _ref[1];
    ctx.translate(cx, cy);
    ctx.strokeStyle = "#CCCCCC";
    ctx.beginPath();
    ctx.moveTo(Board.HEX_RADIUS, 0);
    for (i = _i = 0; _i <= 5; i = ++_i) {
      ctx.rotate(Math.PI / 3);
      ctx.lineTo(Board.HEX_RADIUS, 0);
    }
    ctx.closePath();
    ctx.stroke();
    ctx.fillStyle = hex.getColor();
    ctx.fill();
    if (true) {
      ctx.fillStyle = "#888888";
      ctx.font = "italic 8px";
      ctx.textBaseline = "middle";
      ctx.textAlign = "center";
      _ref1 = hex.coordinate, row = _ref1[0], column = _ref1[1];
      ctx.fillText("" + row + "," + column, 0, 0);
    }
    return ctx.restore();
  };

  return Board;

})();
